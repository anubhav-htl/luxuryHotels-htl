extends ../../adminlayout

block content
  .container.mt-5.mb-4
    .row.justify-content-center
        .col-lg-10
          h2.mb-3 Edit Package
          form(action=`/admin/editsubscription/${subscriptionData._id}`, method='POST')
            .row.g-3.mb-3
              label.form-label(for='name' ) Name:
              input.form-control(type='text'  id='name', name='name', required, value = subscriptionData.name)

            .row.g-3.mb-3
              label.form-label(for='duration' ) Duration in Months
              input.form-control(id='duration' type='number' name='duration' required, value = subscriptionData.duration)

            .row.g-3.mb-3
              .col-6
                label.form-label(for='price' ) Price in Euros
                input.form-control(id='price' type='number' name='price' required, value = subscriptionData.price)

              .col-6
                label.form-label(for='billable' ) Billable?
                select.form-select(name="billable")
                  if subscriptionData && subscriptionData.billable
                    option(selected value= subscriptionData.billable)= subscriptionData.billable === true ? 'Yes' : 'No'
          
                  option(value="true") Yes  
                  option(value="false") No  

            - var index = 0
            #featuresContainer.mb-4
              each feature in subscriptionData.features
                .featureEntry.row.g-3
                  .col-3.mb-1                    
                      label(for='feature' class='form-label') Feature
                      input(type='text' class='form-control', name='features', required value=feature)

                  if index !== 0
                    .col-3(style='padding-top: 30px')
                      button(type='button' class='btn btn-danger delete-feature') -

                - index++



            button.btn.btn-outline-danger(type='button', id='addFeature') Add Another Feature

            input(type='hidden', name='_csrf', value=csrfToken)

            br
            br
            input.btn.btn-danger.btn-lg(type='submit')


        script.
          document.querySelectorAll('.delete-feature').forEach((button, index) => {
            button.addEventListener('click', function() {
              const row = button.closest('.featureEntry');
              row.parentNode.removeChild(row);
            });
          });
          
          document.getElementById('addFeature').addEventListener('click', function() {
            const container = document.getElementById('featuresContainer');
            const index = container.children.length;
            const newFeature = document.createElement('div');
            newFeature.className = 'featureEntry row g-3';
            newFeature.innerHTML = `
              <div class='col-3 mb-1'>
                <label for='feature' class='form-label'>Feature:</label>
                <input type='text' class='form-control' name='features[]' required>
              </div>
              <div class='col-3' style='padding-top: 30px'>
                <button type='button' class='btn btn-danger delete-feature'>-</button>
              </div>
            `;
            container.appendChild(newFeature);

            newFeature.querySelector('.delete-feature').addEventListener('click', function() {
              if (container.children.length > 1) {
                container.removeChild(newFeature);
              }
            });
          });



          const toggleButton1 = document.getElementById('utilities-subscriptions');
          const toggleButton2 = document.getElementById('utilities');
          const collapseTarget1 = document.querySelector(toggleButton1.getAttribute('data-bs-target'));
          const collapseTarget2 = document.querySelector(toggleButton2.getAttribute('data-bs-target'));

          collapseTarget1.classList.add('no-transition');
          collapseTarget2.classList.add('no-transition');
          //- // Set the aria-expanded attribute to true
          toggleButton1.setAttribute('aria-expanded', 'true');
          toggleButton2.setAttribute('aria-expanded', 'true');

          // Use Bootstrap's collapse API to show the collapse element
          const collapseInstance1 = new bootstrap.Collapse(collapseTarget1, {
            toggle: false // Prevents automatic toggle
          });
          const collapseInstance2 = new bootstrap.Collapse(collapseTarget2, {
            toggle: false // Prevents automatic toggle
          });

          collapseInstance1.show();
          collapseInstance2.show();

          setTimeout(() => {
            collapseTarget1.classList.remove('no-transition');
            collapseTarget2.classList.remove('no-transition');
          }, 10); // 10 milliseconds is typically enough
